"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunkEI7MMDWYjs = require('./chunk-EI7MMDWY.js');var _core = require('@goat-sdk/core');var _zod = require('zod');var o=class extends _core.createToolParameters.call(void 0, _zod.z.object({})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"GetSwapRouterAddressParams")}},l= exports.b =_zod.z.object({tokenIn:_zod.z.string().describe("Address of the first token in the path"),tokenOut:_zod.z.string().describe("Address of the last token in the path"),intermediateTokens:_zod.z.array(_zod.z.string()).describe("Addresses of the intermediate tokens in the path"),fees:_zod.z.array(_zod.z.number()).describe("Fee tiers between each hop")}),s= exports.c =class extends _core.createToolParameters.call(void 0, _zod.z.object({path:l.describe("The path of the swap"),recipient:_zod.z.string().describe("Address to receive the output tokens"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountIn:_zod.z.string().describe("The amount of tokens to swap in base units"),amountOutMinimum:_zod.z.string().describe("The minimum amount of tokens to receive in base units")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"ExactInputParams")}},r= exports.d =class extends _core.createToolParameters.call(void 0, _zod.z.object({path:_zod.z.any().describe("The path of the swap"),recipient:_zod.z.string().describe("The address to receive the output tokens"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountOut:_zod.z.string().describe("The amount of tokens to swap out in base units"),amountInMaximum:_zod.z.string().describe("The maximum amount of tokens to swap in in base units")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"ExactOutputParams")}},d= exports.e =class extends _core.createToolParameters.call(void 0, _zod.z.object({tokenInAddress:_zod.z.string().describe("The address of the token to swap in"),tokenOutAddress:_zod.z.string().describe("The address of the token to swap out"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountIn:_zod.z.string().describe("The amount of tokens to swap in in base units"),amountOutMinimum:_zod.z.string().describe("The minimum amount of tokens to receive in base units"),limitSqrtPrice:_zod.z.string().describe("The limit price for the swap")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"ExactInputSingleParams")}},a= exports.f =class extends _core.createToolParameters.call(void 0, _zod.z.object({tokenInAddress:_zod.z.string().describe("The address of the token to swap in"),tokenOutAddress:_zod.z.string().describe("The address of the token to swap out"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountOut:_zod.z.string().describe("The amount of tokens to swap out in base units of the output token"),amountInMaximum:_zod.z.string().describe("The maximum amount of tokens to swap in base units of the input token"),limitSqrtPrice:_zod.z.string().describe("The limit price for the swap")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"ExactOutputSingleParams")}},c= exports.g =class extends _core.createToolParameters.call(void 0, _zod.z.object({poolAddress:_zod.z.string().describe("The address of the pool")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"DefaultConfigurationForPoolParams")}},h= exports.h =class extends _core.createToolParameters.call(void 0, _zod.z.object({token0:_zod.z.string().describe("The first token in the pair"),token1:_zod.z.string().describe("The second token in the pair")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"PoolByPairParams")}},u= exports.i =class extends _core.createToolParameters.call(void 0, _zod.z.object({token0Address:_zod.z.string().describe("The address of the first token in the pair"),token1Address:_zod.z.string().describe("The address of the second token in the pair"),tickLower:_zod.z.number().optional().describe("The lower tick for the liquidity"),tickUpper:_zod.z.number().optional().describe("The upper tick for the liquidity"),amount0Desired:_zod.z.string().describe("The amount of token0 to add in base units"),amount1Desired:_zod.z.string().describe("The amount of token1 to add in base units"),amount0Min:_zod.z.string().describe("The minimum amount of token0 to add in base units"),amount1Min:_zod.z.string().describe("The minimum amount of token1 to add in base units"),deadline:_zod.z.number().describe("The deadline for the swap")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"MintParams")}},b= exports.j =class extends _core.createToolParameters.call(void 0, _zod.z.object({token0Address:_zod.z.string().describe("The address of the first token in the pair"),token1Address:_zod.z.string().describe("The address of the second token in the pair"),tokenId:_zod.z.string().describe("The token id of the liquidity"),amount0Desired:_zod.z.string().describe("The amount of token0 to add in base units"),amount1Desired:_zod.z.string().describe("The amount of token1 to add in base units"),amount0Min:_zod.z.string().describe("The minimum amount of token0 to add in base units"),amount1Min:_zod.z.string().describe("The minimum amount of token1 to add in base units"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"IncreaseLiquidityParams")}},m= exports.k =class extends _core.createToolParameters.call(void 0, _zod.z.object({tokenId:_zod.z.string().describe("The token id of the liquidity"),percentage:_zod.z.number().min(1).max(100).describe("The percentage of liquidity to remove (1-100)"),amount0Min:_zod.z.string().optional().describe("The minimum amount of token0 to remove in base units"),amount1Min:_zod.z.string().optional().describe("The minimum amount of token1 to remove in base units"),deadline:_zod.z.number().optional().default(60*60*24).describe("The deadline for the transaction in seconds from now")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"DecreaseLiquidityParams")}},p= exports.l =class extends _core.createToolParameters.call(void 0, _zod.z.object({tokenId:_zod.z.string().describe("The token id of the LP position whose tokens are being collected")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"CollectParams")}},f= exports.m =class extends _core.createToolParameters.call(void 0, _zod.z.object({tokenId:_zod.z.string().describe("The token id of the liquidity position to be burned")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"BurnParams")}},k= exports.n =class extends _core.createToolParameters.call(void 0, _zod.z.object({price:_zod.z.string().describe("The current price of the pool"),tick:_zod.z.number().describe("The current tick of the pool"),lastFee:_zod.z.number().describe("The current (last known) fee in hundredths of a bip"),pluginCongig:_zod.z.number().describe("The current plugin config as bitmap"),communityFee:_zod.z.number().describe("The community fee represented as a percent of all collected fee in thousandths"),unlocked:_zod.z.boolean().describe("Whether the pool is unlocked")})){static{_chunkEI7MMDWYjs.a.call(void 0, this,"GlobalStateResponseParams")}};exports.a = o; exports.b = l; exports.c = s; exports.d = r; exports.e = d; exports.f = a; exports.g = c; exports.h = h; exports.i = u; exports.j = b; exports.k = m; exports.l = p; exports.m = f; exports.n = k;
