import{a as t}from"./chunk-YSXGDEY5.mjs";import{createToolParameters as n}from"@goat-sdk/core";import{z as e}from"zod";var o=class extends n(e.object({})){static{t(this,"GetSwapRouterAddressParams")}},l=e.object({tokenIn:e.string().describe("Address of the first token in the path"),tokenOut:e.string().describe("Address of the last token in the path"),intermediateTokens:e.array(e.string()).describe("Addresses of the intermediate tokens in the path"),fees:e.array(e.number()).describe("Fee tiers between each hop")}),s=class extends n(e.object({path:l.describe("The path of the swap"),recipient:e.string().describe("Address to receive the output tokens"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountIn:e.string().describe("The amount of tokens to swap in base units"),amountOutMinimum:e.string().describe("The minimum amount of tokens to receive in base units")})){static{t(this,"ExactInputParams")}},r=class extends n(e.object({path:e.any().describe("The path of the swap"),recipient:e.string().describe("The address to receive the output tokens"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountOut:e.string().describe("The amount of tokens to swap out in base units"),amountInMaximum:e.string().describe("The maximum amount of tokens to swap in in base units")})){static{t(this,"ExactOutputParams")}},d=class extends n(e.object({tokenInAddress:e.string().describe("The address of the token to swap in"),tokenOutAddress:e.string().describe("The address of the token to swap out"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountIn:e.string().describe("The amount of tokens to swap in in base units"),amountOutMinimum:e.string().describe("The minimum amount of tokens to receive in base units"),limitSqrtPrice:e.string().describe("The limit price for the swap")})){static{t(this,"ExactInputSingleParams")}},a=class extends n(e.object({tokenInAddress:e.string().describe("The address of the token to swap in"),tokenOutAddress:e.string().describe("The address of the token to swap out"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountOut:e.string().describe("The amount of tokens to swap out in base units of the output token"),amountInMaximum:e.string().describe("The maximum amount of tokens to swap in base units of the input token"),limitSqrtPrice:e.string().describe("The limit price for the swap")})){static{t(this,"ExactOutputSingleParams")}},c=class extends n(e.object({poolAddress:e.string().describe("The address of the pool")})){static{t(this,"DefaultConfigurationForPoolParams")}},h=class extends n(e.object({token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair")})){static{t(this,"PoolByPairParams")}},u=class extends n(e.object({token0Address:e.string().describe("The address of the first token in the pair"),token1Address:e.string().describe("The address of the second token in the pair"),tickLower:e.number().optional().describe("The lower tick for the liquidity"),tickUpper:e.number().optional().describe("The upper tick for the liquidity"),amount0Desired:e.string().describe("The amount of token0 to add in base units"),amount1Desired:e.string().describe("The amount of token1 to add in base units"),amount0Min:e.string().describe("The minimum amount of token0 to add in base units"),amount1Min:e.string().describe("The minimum amount of token1 to add in base units"),deadline:e.number().describe("The deadline for the swap")})){static{t(this,"MintParams")}},b=class extends n(e.object({token0Address:e.string().describe("The address of the first token in the pair"),token1Address:e.string().describe("The address of the second token in the pair"),tokenId:e.string().describe("The token id of the liquidity"),amount0Desired:e.string().describe("The amount of token0 to add in base units"),amount1Desired:e.string().describe("The amount of token1 to add in base units"),amount0Min:e.string().describe("The minimum amount of token0 to add in base units"),amount1Min:e.string().describe("The minimum amount of token1 to add in base units"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now")})){static{t(this,"IncreaseLiquidityParams")}},m=class extends n(e.object({tokenId:e.string().describe("The token id of the liquidity"),percentage:e.number().min(1).max(100).describe("The percentage of liquidity to remove (1-100)"),amount0Min:e.string().optional().describe("The minimum amount of token0 to remove in base units"),amount1Min:e.string().optional().describe("The minimum amount of token1 to remove in base units"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the transaction in seconds from now")})){static{t(this,"DecreaseLiquidityParams")}},p=class extends n(e.object({tokenId:e.string().describe("The token id of the LP position whose tokens are being collected")})){static{t(this,"CollectParams")}},f=class extends n(e.object({tokenId:e.string().describe("The token id of the liquidity position to be burned")})){static{t(this,"BurnParams")}},k=class extends n(e.object({price:e.string().describe("The current price of the pool"),tick:e.number().describe("The current tick of the pool"),lastFee:e.number().describe("The current (last known) fee in hundredths of a bip"),pluginCongig:e.number().describe("The current plugin config as bitmap"),communityFee:e.number().describe("The community fee represented as a percent of all collected fee in thousandths"),unlocked:e.boolean().describe("Whether the pool is unlocked")})){static{t(this,"GlobalStateResponseParams")}};export{o as a,l as b,s as c,r as d,d as e,a as f,c as g,h,u as i,b as j,m as k,p as l,f as m,k as n};
